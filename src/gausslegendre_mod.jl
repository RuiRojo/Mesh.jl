# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 	Código de Funciones especiales para Julia. 

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# 	v 26-3-2021

# 	Código que se trajo desde un paquete de integración (¿cuál?) modificado
#	para ejecutarse un poco más rápido. Se harcodearon algunos ceros de Bessel.
#	De todas maneras las reglas se pregeneran y están cargadas en `JUL.Quadrules.jl`



# 	Agosto de 2016 para Kirchhoff method.
# 	Nuevo uso para BEM
# 	Algunas modificaciones para Julia 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 	
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function gausslegendre( n::Int64 )
	# GAUSSLEGENDRE(n) COMPUTE THE GAUSS-LEGENDRE NODES AND WEIGHTS IN O(n) time.
	# Los primeros están hardcodeados
	if n <= 0
		Float64[], Float64[]
	elseif n == 1
		[0.0], [2.0]
	elseif n == 2
		[-1 / sqrt(3), 1 / sqrt(3)], [1.0, 1.0]
	elseif n == 3
		[-sqrt(3 / 5), 0.0, sqrt(3 / 5)], [5 / 9, 8 / 9, 5 / 9]
	elseif n == 4
		a = 2 / 7 * sqrt(6 / 5)
		([-sqrt(3 / 7 + a), -sqrt(3/7-a), sqrt(3/7-a), sqrt(3/7+a)],
		[(18 - sqrt(30)) / 36, (18 + sqrt(30)) / 36,
		(18 + sqrt(30)) / 36, (18 - sqrt(30)) / 36])
	elseif n == 5
		b = 2 * sqrt(10 / 7)
		([-sqrt(5 + b) / 3, -sqrt(5 - b) / 3, 0.0,
		sqrt(5 - b) / 3, sqrt(5 + b) / 3],
		[(322 - 13 * sqrt(70)) / 900, (322 + 13 * sqrt(70)) / 900, 128 / 225,
		(322 + 13 * sqrt(70)) / 900, (322 - 13 * sqrt(70)) / 900])
	elseif n <= 60
		# NEWTON'S METHOD WITH THREE-TERM RECURRENCE:
		rec(n)
	else
		# USE ASYMPTOTIC EXPANSIONS:
		asy(n)
	end
end

function rec(n)
	# COMPUTE GAUSS-LEGENDRE NODES AND WEIGHTS USING NEWTON'S METHOD.
	# THREE-TERM RECURENCE IS USED FOR EVALUATION. COMPLEXITY O(n^2).
	# Initial guesses:
	x0 = asy(n)[1]
	x = x0[1:n ÷ 2 + 1]
	# Perform Newton to find zeros of Legendre polynomial:
	PP1, PP2 = innerRec(n, x)
	@inbounds @simd for i in 1:length(x)
		x[i] -= PP1[i] / PP2[i]
	end
	# One more Newton for derivatives:
	PP1, PP2 = innerRec(n, x)
	@inbounds @simd for i in 1:length(x)
		x[i] -= PP1[i] / PP2[i]
	end
	# Use symmetry to get the other Legendre nodes and weights:
	m = length(x)
	resize!(x, n)
	resize!(PP2, n)
	@inbounds for i in 1:m-1
		x[n + 1 - i] = -x[i]
		PP2[n + 1 - i] = -PP2[i]
	end
	@inbounds for i in 1:n
		PP2[i] = 2 / ((1 - x[i]^2) * PP2[i]^2)
	end
	x,PP2
end

function asy( n::Int64 )
	# COMPUTE GAUSS-LEGENDRE NODES AND WEIGHTS USING ASYMPTOTIC EXPANSIONS.
	# COMPLEXITY O(n).
		
	# Nodes and weights:
	m = (n + 1) >> 1
	a = besselZeroRoots( m ) ;
# 	scale!(a, 1 / (n + 0.5))
	rmul!( a, 1 / ( n + 0.5 ) ) ; # Julia 1
	x = legpts_nodes(n, a)
	w = legpts_weights(n, m, a)
	# Use symmetry to get the others:
	resize!(x, n)
	resize!(w, n)
	@inbounds for i in 1:m
		x[n + 1 - i] = x[i]
		w[n + 1 - i] = w[i]
	end
	@inbounds for i in 1:m
		x[i] = -x[i]
	end
	@inbounds mod(n, 2) == 1 && (x[m] = 0.0)
	x, w
end

function legpts_nodes( n, a )
	# ASYMPTOTIC EXPANSION FOR THE GAUSS-LEGENDRE NODES.
	vn = 1 / ( n + 0.5 ) ;
	m = length(a)
	nodes = cot.(a)
	vn² = vn * vn
	vn⁴ = vn² * vn²
	if n <= 255
		vn⁶ = vn⁴ * vn²
		for i in 1:m
			u = nodes[i]
			u² = u^2
			ai = a[i]
			ai² = ai * ai
			ai³ = ai² * ai
			ai⁵ = ai² * ai³
			node = ai + (u - 1 / ai) / 8 * vn²
			v1 = (6 * (1 + u²) / ai + 25 / ai³ - u * muladd(31, u², 33)) / 384
			v2 = u * @evalpoly(u², 2595 / 15360, 6350 / 15360, 3779 / 15360)
			v3 = (1 + u²) * (-muladd(31 / 1024, u², 11 / 1024) / ai +
					u / 512 / ai² + -25 / 3072 / ai³)
			v4 = (v2 - 1073 / 5120 / ai⁵ + v3)
			node = muladd(v1, vn⁴, node)
			node = muladd(v4, vn⁶, node)
			nodes[i] = node
		end
	elseif n <= 3950
		for i in 1:m
			u = nodes[i]
			u² = u^2
			ai = a[i]
			ai² = ai * ai
			ai³ = ai² * ai
			node = ai + (u - 1 / ai) / 8 * vn²
			v1 = (6 * (1 + u²) / ai + 25 / ai³ - u * muladd(31, u², 33)) / 384
			node = muladd(v1, vn⁴, node)
			nodes[i] = node
		end
	else
		for i in 1:m
		u = nodes[i]
		ai = a[i]
		node = ai + (u - 1 / ai) / 8 * vn²
		nodes[i] = node
		end
	end
	@inbounds for jj = 1:m
		nodes[jj] = cos(nodes[jj])
	end
	nodes
end

function legpts_weights(n, m, a)
    # ASYMPTOTIC EXPANSION FOR THE GAUSS-LEGENDRE WEIGHTS.
    vn = 1 / (n + 0.5)
    vn² = vn^2
    weights = Array{Float64}( undef, m )
    if n <= 850000
        @inbounds for i in 1:m
            weights[i] = cot.(a[i])
        end
    end
    # Split out the part that can be vectorized by llvm
    @inbounds if n <= 170
        for i in 1:m
            u = weights[i]
            u² = u^2
            ai = a[i]
            ai⁻¹ = 1 / ai
            ai² = ai^2
            ai⁻² = 1 / ai²
            ua = u * ai
            W1 = muladd(ua - 1, ai⁻², 1.0) / 8
            W2 = @evalpoly(ai⁻², @evalpoly(u², -27.0, -84.0, -56.0),
                           muladd(-3.0, muladd(u², -2.0, 1.0), 6 * ua),
                           muladd(ua, -31.0, 81.0)) / 384
            W3 = @evalpoly(ai⁻¹, @evalpoly(u², 153 / 1024, 295 / 256, 187 / 96,
                                           151 / 160),
                           @evalpoly(u², -65 / 1024, -119 / 768, -35 / 384) * u,
                           @evalpoly(u², 5 / 512, 15 / 512, 7 / 384),
                           muladd(u², 1 / 512, -13 / 1536) * u,
                           muladd(u², -7 / 384, + 53 / 3072),
                           3749 / 15360 * u, -1125 / 1024)
            weights[i] = @evalpoly(vn², 1 / vn² + W1, W2, W3)
        end
    elseif n <= 1500
        for i in 1:m
            u = weights[i]
            u² = u^2
            ai = a[i]
            ai² = ai^2
            ai⁻² = 1 / ai²
            ua = u * ai
            W1 = muladd(ua - 1, ai⁻², 1.0) / 8
            W2 = @evalpoly(ai⁻², @evalpoly(u², -27.0, -84.0, -56.0),
                           muladd(-3.0, muladd(u², -2.0, 1.0), 6 * ua),
                           muladd(ua, -31.0, 81.0)) / 384
            weights[i] = muladd(vn², W2, 1 / vn² + W1)
        end
    elseif n <= 850000
        for i in 1:m
            u = weights[i]
            u² = u^2
            ai = a[i]
            ai² = ai^2
            ai⁻² = 1 / ai²
            ua = u * ai
            W1 = muladd(ua - 1, ai⁻², 1.0) / 8
            weights[i] = 1 / vn² + W1
        end
    else
        for i in 1:m
            weights[i] = 1 / vn²
        end
    end
    bJ1 = besselJ1(m)
    @inbounds for i in 1:m
        weights[i] = 2 / (bJ1[i] * (a[i] / sin(a[i])) * weights[i])
    end
    return weights
end

function innerRec( n::Int64, x::Array{Float64} )
	# EVALUATE LEGENDRE AND ITS DERIVATIVE USING THREE-TERM RECURRENCE RELATION.
	N = size(x, 1) ;
	myPm1 = Array{Float64}( undef, N ) ;
	myPPm1 = Array{Float64}( undef, N ) ;
	@inbounds for j = 1 : N
		xj = x[j] ;
		Pm2 = 1.0 ;
		Pm1 = xj ;
		PPm1 = 1.0 ;
		PPm2 = 0.0 ;
		for k = 1 : (n - 1)
			Pm2, Pm1 = Pm1, muladd((2 * k + 1) * Pm1, xj, - k * Pm2) / (k + 1)
			PPm2, PPm1 = PPm1, ((2 * k + 1) * muladd(xj, PPm1, Pm2) -
					k * PPm2) / (k + 1)
		end
		myPm1[j] = Pm1 ;
		myPPm1[j] = PPm1 ;
	end
	return myPm1, myPPm1
end

besselZeros_20 = [2.4048255576957728, 5.5200781102863106,
		8.6537279129110122, 11.791534439014281,
		14.930917708487785, 18.071063967910922,
		21.211636629879258, 24.352471530749302,
		27.493479132040254, 30.634606468431975,
		33.775820213573568, 36.917098353664044,
		40.058425764628239, 43.199791713176730,
		46.341188371661814, 49.482609897397817,
		52.624051841114996, 55.765510755019979,
		58.906983926080942, 62.048469190227170] ;
	
function besselZeroRoots( m::Int64 )
	# BESSEL0ROOTS ROOTS OF BESSELJ(0,x). USE ASYMPTOTICS.
	# Use McMahon's expansion for the remainder (NIST, 10.21.19):
	jk = Array{Float64}( undef, m )
	p = (1071187749376 / 315, 0.0, -401743168 / 105, 0.0, 120928 / 15,
		0.0, -124 / 3, 0.0, 1.0, 0.0)
	# First 100 are precomputed:
	@inbounds for jj = 1:min(m, 100)
		jk[jj] = besselZeros_100[jj]
	end
#	@inbounds for jj = 21:min(m, 47)
#		ak = π * (jj - .25)
#		ak82 = (.125 / ak)^2
# 		jk[jj] = ak + .125 / ak * @evalpoly(ak82, 1.0, p[7], p[5], p[3])
#	end
	@inbounds for jj = 101:min(m, 344)
		ak = π * (jj - .25)
		ak82 = (.125 / ak)^2
		jk[jj] = ak + .125 / ak * @evalpoly(ak82, 1.0, p[7], p[5])
	end
	@inbounds for jj = 345:min(m,13191)
		ak = π * (jj - .25)
		ak82 = (.125 / ak)^2
		jk[jj] = ak + .125 / ak * muladd(ak82, p[7], 1.0)
	end
	@inbounds for jj = 13192:m
		ak = π * (jj - .25)
		jk[jj] = ak + .125 / ak
	end
	return jk
end

besselJ1_10 = [0.2695141239419169, 0.1157801385822037,
                     0.07368635113640822, 0.05403757319811628,
                     0.04266142901724309, 0.03524210349099610,
                     0.03002107010305467, 0.02614739149530809,
                     0.02315912182469139, 0.02078382912226786] ;

function besselJ1( m::Int64 )
	# BESSELJ1 EVALUATE BESSELJ(1,x)^2 AT ROOTS OF BESSELJ(0,x).
	# USE ASYMPTOTICS. Use Taylor series of (NIST, 10.17.3) and McMahon's
	# expansion (NIST, 10.21.19):	
	Jk2 = Array{Float64}( undef, m )
	c = (-171497088497 / 15206400, 461797 / 1152, -172913 / 8064,
		151 / 80, -7 / 24, 0.0, 2.0)
	# First 100 are precomputed:
	@inbounds for jj = 1:min(m, 100)
		Jk2[jj] = besselJ1_100[jj]
	end
# 	@inbounds for jj = 11:min(m, 15)
# 		ak = π * (jj - .25)
# 		ak2 = (1 / ak)^2
# 		Jk2[jj] = 1 / (π * ak) * muladd(@evalpoly(ak2, c[5], c[4], c[3],
# 							c[2], c[1]), ak2^2, c[7])
# 	end
# 	@inbounds for jj = 16:min(m, 21)
# 		ak = π * (jj - .25)
# 		ak2 = (1 / ak)^2
# 		Jk2[jj] = 1 / (π * ak) * muladd(@evalpoly(ak2, c[5], c[4], c[3], c[2]),
# 						ak2^2, c[7])
# 	end
# 	@inbounds for jj = 22:min(m,55)
# 		ak = π * (jj - .25)
# 		ak2 = (1 / ak)^2
# 		Jk2[jj] = 1 / (π * ak) * muladd(@evalpoly(ak2, c[5], c[4], c[3]),
# 						ak2^2, c[7])
# 	end
	@inbounds for jj = 101:min(m,279)
		ak = π * (jj - .25)
		ak2 = (1 / ak)^2
		Jk2[jj] = 1 / (π * ak) * muladd(muladd(ak2, c[4], c[5]), ak2^2, c[7])
	end
	@inbounds for jj = 280:min(m,2279)
		ak = π * (jj - .25)
		ak2 = (1 / ak)^2
		Jk2[jj] = 1 / (π * ak) * muladd(ak2^2, c[5], c[7])
	end
	@inbounds for jj = 2280:m
		ak = π * (jj - .25)
		Jk2[jj] = 1 / (π * ak) * c[7]
	end
	return Jk2
end

besselZeros_100 =[ 2.404825557695772768621631879326454643124244909145967135706999091,
			5.520078110286310649596604112813027425221865478782909853757552038, 
			8.653727912911012216954198712660946685565795231275355618891476583, 
			11.79153443901428161374304491192545892202292469969544670325051088, 
			14.93091770848778594776259399738868220791585011563302815877417322, 
			18.07106396791092254314788297561817656024898674700132608642331464, 
			21.21163662987925895907839335052630683618180897597639983273820273, 
			24.35247153074930273705794476317890718456937267514892702240604564, 
			27.49347913204025479587728823460741454652956886054962201093886123, 
			30.63460646843197511754957892685423273727357162917814719075501790, 
			33.77582021357356868423854634671472802393270574256681654896409701, 
			36.91709835366404397976949306327295263648570258557603671668836462, 
			40.05842576462823929479930737399447291034796195199012415868824685, 
			43.19979171317673035752407272874342217087609792088225285754043914, 
			46.34118837166181401868578887911284917465014850526036343721391987, 
			49.48260989739781717360276153317827226970223775303862008955551808, 
			52.62405184111499602925128538039157330012033293268689416022022218, 
			55.76551075501997931168349277346183063137533975520469235341128403, 
			58.90698392608094213283440663461568558565808885575615461187767812, 
			62.04846919022716988285250026465095232381538376625090460270166419, 
			65.18996480020686044063603374251231622565656770477683865837154696, 
			68.33146932985679827099230383998437803684762122272681831988360808, 
			71.47298160359373282506307385612970055337189382578856446510643179, 
			74.61450064370183788382054046933555420302085378437273627621670707, 
			77.75602563038805503773937189123369326508356221613835617080796753, 
			80.89755587113762786377214349087305285687472596966172129297130580, 
			84.03909077693819015787963834799795512771258941740554588205731175, 
			87.18062984364115365126180506904860884867212994645584329667434229, 
			90.32217263721048005571776677762790891448612157257768677498893487, 
			93.46371878194477417119059154398091075732394006291777249164732629, 
			96.60526795099626877812161732392789687942556039142086104234678213, 
			99.74681985868059647027997900013457780103992953775104700441151683, 
			102.8883742541947945964200342725645762892747000469584989258453419, 
			106.0299309164516155101769171918824475816359732209914499981016301, 
			109.1714896498053835520659770127496566182972768952133643299706286, 
			112.3130502804949096274945061221783313859406220041129217635181728, 
			115.4546126536669396281177566940295965973465801155992285306426266, 
			118.5961766308725317156293844752439096602568188651751001411312284, 
			121.7377420879509629652343634833408945102974045884817628259974779, 
			124.8793089132329460452591283669041436285463536911330682417959787, 
			128.0208770060083240797635593922979439000814374279297053874650456, 
			131.1624462752139146078961149915269377945370044092091556227339593, 
			134.3040166383054660993528968341003824951897372355874081330285493, 
			137.4455880202842777877826614833321657450146975132362709638297288, 
			140.5871603528542965484889033400605696568219398763265174195771790, 
			143.7287335736897325339507180047704855583099769124146723129294019, 
			146.8703076257966495941327048582533181032887726483011684526266377, 
			150.0118824569547574908804729740729568628687242024843517910474756, 
			153.1534580192278924875916256101535787945214523877731752419909333, 
			156.2950342685335238195494952731360466983897143215929172235715853, 
			159.4366111642631463234910379100018016127919661714432213970812203, 
			162.5781886689466775190598089629418332165144471527909894288535658, 
			165.7197667479550208666904267382036263864010773854807580981034563, 
			168.8613453692358256874563374523317971596299967544267578084269148, 
			172.0029245030782002154004315073257260352133471325537552678965613, 
			175.1445041219027430653727978591034457059946501756806595571523106, 
			178.2860842000737706814839741912507574863690392176790444721567615, 
			181.4276647137310507942121995870507350422537051514699217702747946, 
			184.5692456406387181411154122479170208829243943226228613570995561, 
			187.7108269600493597800752657208008419042871556584197823665765780, 
			190.8524086525815223217807989495973327305483919112867651799597128, 
			193.9939907001091197899403967274862503023518302873521933209648644, 
			197.1355730856614147362120026807249579527083099723286266174600162, 
			200.2771557933324117833620874712691075689045251854878528390243709, 
			203.4187388081986461712488202153193331092571887476967266443370006, 
			206.5603221162444736554572449284017463852104323928666516402335165, 
			209.7019057042940751974824466658012730605618074137532029523045008, 
			212.8434895599494827507455656774679536613551284101586407667246543, 
			215.9850736715340131569956378831424943974551405165978821355876528, 
			219.1266580280405674651891309782347220139553983626877224783334708, 
			222.2682426190843143412845243794722513887703663948371764802168755, 
			225.4098274348593298985131819962700006242931838129747789179721829, 
			228.5514124660988133011978406902287918948929820372193903555668001, 
			231.6929977040385387809737961925010375234795227611568126873994445, 
			234.8345831403832410198080232665635801625754139465680738253267020, 
			237.9761687672756628555575633232857594584949543733882795632481745, 
			241.1177545772680225149969710899110142280844323015427965288324118, 
			244.2593405632956825588065761778659632656490433579677109487385963, 
			247.4009267186528248480879406894697712224847326676357269126762011, 
			250.5425130369699554704463652830012513215685042465571899853474226, 
			253.6840995121930810046928085043858323541569204592502753109092089, 
			256.8256861385644130243177332863651648435750362827049525825930669, 
			259.9672729106044715730647775691999055006323028293274955395528306, 
			263.1088598230954706927040025763371270362733330722211827739126466, 
			266.2504468710658801188409542340070846081897398546088306777808326, 
			269.3920340497760671381733961383535003542953705800397711875418429, 
			272.5336213547049314535143489693489454864098631765757335237917399, 
			275.6752087815374538478977949689463937439704142668269549772684035, 
			278.8167963261530865784617738644798875236642658912174313711014835, 
			281.9583839846149198543167096767901614986865790840608619987101390, 
			285.0999717531595645391305877430465350491678846857860544446853161, 
			288.2415596281876964381173950207248524921562599742907573399753256, 
			291.3831476062552122416890500692214469818732641424102816861352316, 
			294.5247356840649514582331771109153793857185603165970569555014264, 
			297.6663238584589425240491906748523798955640908293128180555582101, 
			300.8079121264111347716689688513188302820666001993652592589440417, 
			303.9495004850205811060577797539817092857261980569145221510820239, 
			307.0910889315050391147737970003260498900239277863856788378520116, 
			310.2326774631949609525960930436140224130001146625063350386135030, 
			313.3742660775278447196902451019045127229414512964006431856305600 ] ;
			
besselJ1_100 = [0.2695141239419169261390219929104026286441518001194930649405700597, 
			0.1157801385822036958078128361820292231490211566685318694630647691, 
			0.07368635113640821514064768119854653996890706450536031967848347082, 
			0.05403757319811628204177491827590793596214955057511062219722686902, 
			0.04266142901724309126551060634965229490623658620631641747447749496, 
			0.03524210349099610135874730336482314221742540831133680575811784203, 
			0.03002107010305467267508881576880592210020807682989008338288915912, 
			0.02614739149530808859045846753991682068025523332908944760620754538, 
			0.02315912182469139226526763821779865820364109839102193503483771653, 
			0.02078382912226785760398080572963465485653433334145850266368044707, 
			0.01885045066931766781610568002132832183795881401957335562884440457, 
			0.01724615756966500829952400535419506148534644294414343255071606985, 
			0.01589351810592359780270655942874182687109610078395860535384001753, 
			0.01473762609647218958957429825912958282187840332388124724836909700, 
			0.01373846514538711791828804841347849550956575595377670049548394089, 
			0.01286618173761513287914066372287788503540320880244738013440336159, 
			0.01209805154862679754710754384968880736320559624222089342647281175, 
			0.01141647122449160851686272229866117657198327178166322783214381729, 
			0.01080759279118020401155472868305299828669170358340020908604630305, 
			0.01026037292628076281104239927887119193295911266546481611547296685, 
			0.009765897139791050540598467366965565653278495219962045682858421058, 
			0.009316890387627165089035632827543716505003917774944691042253603028, 
			0.008907356754001989588571843828497737900616035052769479533527164288, 
			0.008532310161358082912843132003566586107000283898335114619919272588, 
			0.008187570362708155231855111129821547337895233423204106895712756221, 
			0.007869606469720769245904622045247795539796347899855167333674258280, 
			0.007575415577297647171696497990546454139564507284740946215559000205, 
			0.007302427631477640916499629517642258090578746882048671706691858423, 
			0.007048430150990362553749572265563455483855061364662821359967143842, 
			0.006811508131014086166066238472086859446497880009049277973142059509, 
			0.006589995673027395492486227731414532855029963660023334911234523897, 
			0.006382436755474726224798981043420289321992283642864874827143964742, 
			0.006187553191484489441487577489687409222571815498451449951175268697, 
			0.006004218282992124265048930982442091314882937748215326053557252208, 
			0.005831435023791024859902977092053667676125631868661343222291813312, 
			0.005668317960812312720223629902717809566418798422038517740791080664, 
			0.005514078016828053688653591384750061639090807755372340905097988287, 
			0.005368009725439863288398272107947976394660486014337502686084660465, 
			0.005229480442585263938253468663723899217506554383768356059841394707, 
			0.005097921186495808209928708100151502995599741411336389513167730847, 
			0.004972818826372946516063343803653877228842332725269434895733819258, 
			0.004853709393649340343344508877162289525952063449082621186967630797, 
			0.004740172332020473241897144663697565926029624010200006500447706980, 
			0.004631825536043321466370891596103519967149947028524455479555450187, 
			0.004528321054950819478243137184759574891591392811753400227547511282, 
			0.004429341359900473975484017125778709800967699840991266523413450167, 
			0.004334596090292659048095532585439114839832842055443156473843644192, 
			0.004243819208928485207692995683038407864356524293401094880232211529, 
			0.004156766507302075059314314603129626154256482017003826116066427379, 
			0.004073213411762104781716805135114323929690363662608203285016865908, 
			0.003992953049043403740024513416770383572979501393623610387469878465, 
			0.003915794536084740723566698135689239413467052536891813020098511268, 
			0.003841561464369701806609636007240232120218499956205927932277438920, 
			0.003770090553457420663552494974233688505643885747490235963392874027, 
			0.003701230452071582559301579045441467554099984293720447892711213787, 
			0.003634840668220206189194853513808563630455607460304331950150627755, 
			0.003570790612430513043864221902020467391875812591764107605589766622, 
			0.003508958740387964867393024493093577647027715186005802537985812546, 
			0.003449231783135568545245781254710697135993135004806172201759900589, 
			0.003391504054575341951502996932841067648921578093818155758053309786, 
			0.003335676827364696012148852314612746530181282031585532611603604662, 
			0.003281657769454463244534826567615457288640262765370870987247693491, 
			0.003229360434503767681890544232032345047593216879811808698208154403, 
			0.003178703800255847793576993857723304581792149562798419989545030617, 
			0.003129611849689864572478588433419620078015868833176433070323260695, 
			0.003082013190394597561143741255787977685498678114205558203269719324, 
			0.003035840708155740985723170386076555743708853763908449755785166069, 
			0.002991031251221815520178761380743690647375080553887530561993110615, 
			0.002947525342125054846063427782152937028412418615124369304378664887, 
			0.002905266914291893217832154776216506026304507730630793908082705507, 
			0.002864203070990372682649514791167744867316253586053490266435625508, 
			0.002824283864435258298296496492781931638614856120772603074982106080, 
			0.002785462093111288085471628107680510619962034190419455938838262966, 
			0.002747693115585378836624735278768675216289187742736049396388227068, 
			0.002710934679263671524108763921415410513856480326428937768308086846, 
			0.002675146762712375033250918932294332156068072439630490603762284065, 
			0.002640291430305319129690811717234948865956297731660371304734709424, 
			0.002606332698088416478971085508156668375152894508764366074292725339, 
			0.002573236409863975141308650806559495931512641813255142555844305294, 
			0.002540970122597821379014659369591739286782325648089316082735425662, 
			0.002509503000341063465443814274164186837556922891642088134112060817, 
			0.002478805715937414088907401897904212380083300663605876072245257834, 
			0.002448850359857474252740023678104653670279603382720414650245260439, 
			0.002419610355564292339990717857619436941384977897267678009882204129, 
			0.002391060380870741989094537064181795264437293944215880905023122381, 
			0.002363176294799590716167389779959736190638531361493359210519263558, 
			0.002335935069502238130173807346277236330337144510290473072745048946, 
			0.002309314726832583148048508881491345502059372328420544755132124792, 
			0.002283294279208855106751867186545206034401556090195858616290576555, 
			0.002257853674428971477721915388611303477795159451513643362717711705, 
			0.002232973744134466964613834371269628079869669765605459628712257475, 
			0.002208636155644628865960421455990006855227279646898712028349194101, 
			0.002184823366906483513642342741724710050603761811382990419063243813, 
			0.002161518584327983574115185205436906750503297642406677724080129105, 
			0.002138705723281389289028113368922872886541119103334367920246714512, 
			0.002116369371081633654910377449834696464170389646923648112167798988, 
			0.002094494752260602936925773539159189103172148935604011481890234048, 
			0.002073067695972919142749858584239528902287328970145950864257194831, 
			0.002052074605382130647056988534552479497615997976755854096201391640, 
			0.002031502428888334956329182411096452111668866178218279255352222378 ] ;
